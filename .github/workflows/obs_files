#!/bin/bash

_git_pkg()
{
    # PKGBUILD after prepare() has updated pkgver
    rm PKGBUILD
    cp /home/build/PKGBUILD .

    # remove pkgver function
    sed -i '/^pkgver() {$/,/^}$/d' PKGBUILD
}

_gen_constraints()
{
cat > "_constraints" << EOF
<!-- vim: set ft=xml : -->
<constraints>
  <hardware>
    <disk>
      <size unit="G">16</size>
    </disk>
    <memory>
      <size unit="G">16</size>
    </memory>
  </hardware>
</constraints>
EOF
}

mongodb()
{
	source PKGBUILD

cat > "_service" << EOF
<services>
  <service name="obs_scm">
    <param name="scm">git</param>
    <param name="url">git://github.com/jstkdng/aur</param>
    <param name="extract">$PACKAGE/$PACKAGE.*</param>
  </service>
  <service name="download_files"/>
</services>
EOF

cat > "_constraints" << EOF
<!-- vim: set ft=xml : -->
<constraints>
  <hardware>
    <memory>
      <size unit="G">12</size>
    </memory>
  </hardware>
</constraints>
EOF
}

python-cheetah3()
{
cat > "_service" << EOF
<services>
  <service name="download_files"/>
</services>
EOF
}

ungoogled-chromium()
{

source PKGBUILD

# Add required dependencies for OBS
newdeps=$(printf "'%s' " "${depends[@]}")
makedeps=$(printf "'%s' " "${makedepends[@]}")

makedeps=$(printf '%s\n' "${makedeps//\'java-runtime-headless\'/}")
makedeps="${makedeps}'jack' 'jre-openjdk-headless' 'wayland-protocols'"

sed -r -i \
    -e '/^depends=/,/[)]$/cdepends=('"${newdeps}"')' \
    -e '/^depends[+]=/d' \
    -e '/^makedepends=/,/[)]$/cmakedepends=('"${makedeps}"')' \
    "PKGBUILD"

# Generate _service file
cat > "_service" << EOF
<services>
  <service name="download_url">
    <param name="protocol">https</param>
    <param name="host">commondatastorage.googleapis.com</param>
    <param name="path">/chromium-browser-official/chromium-$pkgver.tar.xz</param>
    <param name="filename">chromium-$pkgver.tar.xz</param>
  </service>
  <service name="download_url">
    <param name="protocol">https</param>
    <param name="host">github.com</param>
    <param name="path">/foutrelis/chromium-launcher/archive/v$_launcher_ver.tar.gz</param>
    <param name="filename">chromium-launcher-$_launcher_ver.tar.gz</param>
  </service>
  <service name="download_url">
    <param name="protocol">https</param>
    <param name="host">github.com</param>
    <param name="path">/Eloston/ungoogled-chromium/archive/$pkgver-1.tar.gz</param>
    <param name="filename">ungoogled-chromium-$pkgver-1.tar.gz</param>
  </service>
  <service name="download_url">
    <param name="protocol">https</param>
    <param name="host">github.com</param>
    <param name="path">/stha09/chromium-patches/releases/download/chromium-${pkgver%%.*}-patchset-$_gcc_patchset/chromium-${pkgver%%.*}-patchset-$_gcc_patchset.tar.xz</param>
    <param name="filename">chromium-${pkgver%%.*}-patchset-$_gcc_patchset.tar.xz</param>
  </service>
  <service name="obs_scm">
    <param name="scm">git</param>
    <param name="url">git://github.com/jstkdng/aur</param>
    <param name="extract">$PACKAGE/chromium-drirc-disable-10bpc-color-configs.conf</param>
    <param name="extract">$PACKAGE/*.patch</param>
  </service>
</services>
EOF

_gen_constraints
}

xmrig-donateless()
{
source PKGBUILD

cat > "_service" << EOF
<services>
  <service name="obs_scm">
    <param name="scm">git</param>
    <param name="url">git://github.com/jstkdng/aur</param>
    <param name="extract">$PACKAGE/xmrig.*</param>
  </service>
  <service name="download_url">
    <param name="protocol">https</param>
    <param name="host">github.com</param>
    <param name="path">/xmrig/xmrig/archive/v${pkgver}.tar.gz</param>
    <param name="filename">${pkgname}-${pkgver}.tar.gz</param>
  </service>
</services>
EOF

_gen_constraints
}

znc()
{
source PKGBUILD

cat > "_service" << EOF
<services>
  <service name="obs_scm">
    <param name="scm">git</param>
    <param name="url">git://github.com/jstkdng/aur</param>
    <param name="extract">$PACKAGE/znc.*</param>
  </service>
  <service name="download_url">
    <param name="protocol">https</param>
    <param name="host">znc.in</param>
    <param name="path">/releases/archive/$pkgname-$pkgver.tar.gz</param>
    <param name="filename">$pkgname-$pkgver.tar.gz</param>
  </service>
</services>
EOF

_gen_constraints
}

xorgproto-git()
{
_git_pkg

source PKGBUILD

# replace git url
new_url="\${pkgname}.tar"
sed_param=s/_srcurl=.*/_srcurl=\"${new_url}\"/
sed -i "$sed_param" PKGBUILD

# generate _service file
cat > "_service" << EOF
<services>
  <service name="tar_scm">
    <param name="scm">git</param>
    <param name="url">https://gitlab.freedesktop.org/xorg/proto/$_pkgname.git</param>
    <param name="filename">$pkgname</param>
    <param name="version">_none_</param>
  </service>
</services>
EOF

_gen_constraints
}

linux-amd-staging-drm-next-git()
{
_git_pkg

source PKGBUILD

# replace git url
new_url="\${_srcname}.tar"
sed_param=s/_srcurl=.*/_srcurl=\"${new_url}\"/
sed -i "$sed_param" PKGBUILD

# generate _service file
cat > "_service" << EOF
<services>
  <service name="obs_scm">
    <param name="scm">git</param>
    <param name="url">git://github.com/jstkdng/aur</param>
    <param name="extract">$PACKAGE/config</param>
    <param name="extract">$PACKAGE/*.patch</param>
  </service>
  <service name="tar_scm">
    <param name="scm">git</param>
    <param name="url">git://people.freedesktop.org/~agd5f/linux</param>
    <param name="revision">amd-staging-drm-next</param>
    <param name="filename">linux-agd5f</param>
    <param name="version">_none_</param>
  </service>
</services>
EOF

_gen_constraints
}

xorg-server-git()
{
_git_pkg

source PKGBUILD

# replace git url
new_url="\${_pkgbase}.tar"
sed_param=s/_srcurl=.*/_srcurl=\"${new_url}\"/
sed -i "$sed_param" PKGBUILD

# generate _service file
cat > "_service" << EOF
<services>
  <service name="obs_scm">
    <param name="scm">git</param>
    <param name="url">git://github.com/jstkdng/aur</param>
    <param name="extract">$PACKAGE/xvfb-*</param>
    <param name="extract">$PACKAGE/*.install</param>
  </service>
  <service name="tar_scm">
    <param name="scm">git</param>
    <param name="url">https://gitlab.freedesktop.org/xorg/xserver.git</param>
    <param name="filename">$_pkgbase</param>
    <param name="version">_none_</param>
  </service>
</services>
EOF
_gen_constraints
}

xf86-video-amdgpu-git()
{
_git_pkg

source PKGBUILD

# replace git url
new_url="\${pkgname}.tar"
sed_param=s/_srcurl=.*/_srcurl=\"${new_url}\"/
sed -i "$sed_param" PKGBUILD

# generate _service file
cat > "_service" << EOF
<services>
  <service name="tar_scm">
    <param name="scm">git</param>
    <param name="url">https://gitlab.freedesktop.org/xorg/driver/$_pkgname</param>
    <param name="filename">$pkgname</param>
    <param name="version">_none_</param>
  </service>
</services>
EOF

_gen_constraints
}

linux-firmware-git()
{
_git_pkg

source PKGBUILD

# replace git url
new_url="\$pkgbase.tar"
sed_param=s/_srcurl=.*/_srcurl=\"${new_url}\"/
sed -i "$sed_param" PKGBUILD

# generate _service file
cat > "_service" << EOF
<services>
  <service name="tar_scm">
    <param name="scm">git</param>
    <param name="url">https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git</param>
    <param name="filename">$pkgbase</param>
    <param name="revision">main</param>
    <param name="version">_none_</param>
  </service>
</services>
EOF

_gen_constraints
}

linux-kamakiri()
{
source PKGBUILD

new_url="\$pkgbase.tar"
sed_param=s/_srcurl=.*/_srcurl=\"${new_url}\"/
sed -i "$sed_param" PKGBUILD

# generate _service file
cat > "_service" << EOF
<services>
  <service name="obs_scm">
    <param name="scm">git</param>
    <param name="url">git://github.com/jstkdng/aur</param>
    <param name="revision">obs</param>
    <param name="extract">$PACKAGE/config</param>
    <param name="extract">$PACKAGE/*.patch</param>
  </service>
  <service name="tar_scm">
    <param name="scm">git</param>
    <param name="url">https://git.archlinux.org/linux.git</param>
    <param name="filename">$pkgbase</param>
    <param name="revision">$_srctag</param>
    <param name="version">_none_</param>
  </service>
</services>
EOF

_gen_constraints
}

